/* ************************************************************************ */
/*    Ex8:                                                                  *
 *    Programa de Ordenação e comparação de vetores                         *
 *                                                                          *
 *  Descrição: Implementação de                                             *
 *             um Programa de Ordenação e comparação de vetores             *
 *                                                                          *
 *  Copyright (C) Thiago De Azevedo Cavendish, 2021                         *
 *                                                                          *
 *  2021-11-21                                                              *
 *  Contato: tac@poli.br                                                    *
 * ************************************************************************ */

/* ------------------------------------------------------------------------ */
/* Includes */

#include <stdio.h> /* Funções basicas */
#include <stdlib.h> /* Funções diversas (rand, malloc, srand)*/ //Saída
#include <time.h> /* time functions */
#include <float.h> /* Constantes flutuantes */
#include <ctype.h>  /* Character functions */  //Para usar caracteres
#include <string.h> /* Strings functions definitions */

//#include <getopt.h> /* Recebe opções do sistema argc/argv */

/* ------------------------------------------------------------------------ */
/* Function prototypes */

void aleatorios(int a[], int b);
void printvetor(int a[]);
void bubblesort(int a[]);
void insertionsort(int a[]);

/* -------------------------------------------------------------- */
/* FunCOes Utilizadas */

void aleatorios(int vetor[], int n)
{
srand(time(NULL));
int i,j,c,o;
vetor[0] = rand() % n;

    for(i=0;i<n;i++)
    {
     j = rand() % n;

     for(c=0;c<i;c++)
     {
      if(vetor[c] == j)
      {
       i--;
       o=0;
       break;
      }

      else if (vetor[c] != j)
      {
       vetor[i] = j;
       o++;
      }
     }

     if(o!=0)
     {
      o=0;
     }
    }

}


void printvetor(int vetor[])
{
    for(int c=0;c<501;c++)
    {
     printf("%i,",vetor[c]);
    }
    printf("]\n ");
}


void bubblesort(int vetor[])
{
int c, i,temp = 0;

    for(c=0;c<501;c++)
    {
        for(i=0;i<501;i++)
        {
         if(vetor[i]>vetor[i+1])
         {
            temp = vetor[i];
            vetor[i] = vetor[i+1];
            vetor[i+1] = temp;
         }
        }
    }
}


void insertionsort(int vetor[])
{
int i,j,temp = 0;


    for(i=1; i<501; i++) 
    {
        temp = vetor[i];
        j=i-1;
    
     while(j>=0 && vetor[j]>temp) 
     {
         vetor[j+1]=vetor[j];
         j--;
     }
     vetor[j+1]=temp;
    }
}

/* ------------------------------------------------------------------------ */
/* FunCAo principal */

int main(void)
{
int vetor[501],c;
char choice;

    printf("\n------------------------------------------------------\n");
    printf(" Welcome to the Ex8 vector organization teste \n");

    printf("\n O vetor analisado esta no sistema ? \n (Caso voce queira colocar o vetor diretamente.) [Y|N] :  ");
    scanf("%s", &choice);

    if((choice == 'n')||(choice == 'N'))
    {
      printf("\n VocE deseja um vetor aleatorio ?  [Y|N] ");
      scanf("%s", &choice);

      if((choice == 'n')||(choice =='N'))
      {
       printf("\n Qual o vetor a ser organizado : [Aperte 'Enter' para confirmar o numero] \n ");

       for(c=0;c<501;c++)
       {
        scanf("%i", &vetor[c]);
       }
      }

      else if((choice == 'y')||(choice == 'Y'))
      {
          printf("\n Seu vetor eh :  \n [");
          aleatorios(vetor,501);
          printvetor(vetor);
      }
    }

    printf("\n Como deseja organizar o seu vetor [ (1) Bubble Sort, (2) Insertion Sort, ou (N) Nada ] : ");
    scanf("%s", &choice);

        switch(choice)
        {
            case '1':
                printf("\n Seu vetor organizado por Bubble Sort eh : \n\n [");
                bubblesort(vetor);
                printvetor(vetor);
                break;

            case '2':
                printf("\n Seu vetor organizado por Intersection sort eh : \n\n [");
                insertionsort(vetor);
                printvetor(vetor);
                break;
            default:
                break;
        }
             
    printf("\n");
    printf("/* --------------------------------------------------------------------------------- */ \n\n");

    return 0;
}   

/* ------------------------------------------------------------------------ */

